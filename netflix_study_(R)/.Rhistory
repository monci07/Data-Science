demos
demos()
demo()
titles = read.csv("titles.csv")
dir
setwd("D:/Practicas/Semestre_actual/data-study/netflix study (R)")
titles = read.csv("titles.csv")
View(titles)
bad = is.na(titles)
titles = title[!bad]
titles <-read.csv("titles.csv")
bad <- is.na(titles)
titles <- titles[!bad]
titles <-read.csv("titles.csv")
titles <- titles[complete.cases(titles), ]
titles <-read.csv("titles.csv")
titles <- titles[complete.cases(titles), ]
titles <-read.csv("titles.csv")
titles <- titles[complete.cases(titles[ , c('imdb_score','tmdb_score')]), ]
mtcars
mtcars$am <- as.factor(mtcars$am)
mtcars
mtcars$am <- as.factor(mtcars$cyl)
mtcars
titles$type <- as.factor(titles$type)
str(titles)
titles['type']
table <- read.csv('titles.csv')
View(titles)
View(titles)
table
netflix
netflix <- read.csv('titles.csv')
netflix <- read.csv('titles.csv')
source("~/.active-rstudio-document")
netflix <- read.csv('titles.csv')
netflix <- complete.cases(netflix[c('imdb_scores','tmdb_scores')])
netflix <- complete.cases(netflix[c('imdb_score','tmdb_score')])
netflix <- read.csv('titles.csv')
netflix <- netflix[complete.cases(netflix[c('imdb_score','tmdb_score')])]
netflix <- netflix[complete.cases(,netflix[c('imdb_score','tmdb_score')])]
netflix <- netflix[complete.cases(,netflix[c('imdb_score','tmdb_score')])]
netflix <- netflix[complete.cases(netflix[,c('imdb_score','tmdb_score')])]
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
df <- read.csv('titles.csv')
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
df
netflix_s <- df[df$type == 'SHOW']
netflix_s <- df[,df$type == 'SHOW']
netflix_s <- df[df$type == 'SHOW',]
netflix_s_t <- netflix_s[c('runtime','imdb_score'),]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
view(show_test.R)
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
## si me quiero quedar con los renglones es: df[c(),]
## si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
runtime_std = sd(netflix_s_t['runtime'])
runtime_mean = mean(netflix_s_t['runtime'])
imdb_score_std = sd(netflix_s_t['imdb_score'])
imdb_score_mean = mean(netflix_s_t['imdb_score'])
netflix_s_t['runtime']
type(netflix_s_t['runtime'])
str(netflix_s_t['runtime'])
runtime_std = sd(list(netflix_s_t['runtime']))
runtime_std = sd(double(netflix_s_t['runtime']))
runtime_std = sd(double(netflix_s_t$runtime]))
runtime_std = sd(netflix_s_t$runtime)
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
## si me quiero quedar con los renglones es: df[c(),]
## si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
## si me quiero una columna como:
##  -vector: nombre_t$nombre_c
##  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
netflix_s_t_su <- data.frame(
"runtime (SU)": (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
plot(netflix_s_t_su)
[1,2,3,4,5] * 2
(netflix_s_t$runtime-runtime_mean)/runtime_std
str((netflix_s_t$runtime-runtime_mean)/runtime_std)
netflix_s_t_su <- data.frame(
"runtime (SU)": c((netflix_s_t$runtime-runtime_mean)/runtime_std),
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
run_su = (netflix_s_t$runtime-runtime_mean)/runtime_std
imdb_su = (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
netflix_s_t_su <- data.frame(
"runtime (SU)": run_su,
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
netflix_s_t_su <- data.frame(
"runtime (SU)": c(run_su),
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
netflix_s_t_su <- data.frame(
"runtime (SU)": c(run_su),
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
netflix_s_t_su <- data.frame(
"runtime (SU)": [run_su],
"imdb_score (SU)": (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
str(run_su)
run_su = c((netflix_s_t$runtime-runtime_mean)/runtime_std)
str(run_su)
netflix_s_t_su <- data.frame(
"runtime (SU)": run_su,
"imdb_score (SU)": imdb_su
)
run_su <- (netflix_s_t$runtime-runtime_mean)/runtime_std
run_su <- (netflix_s_t$runtime-runtime_mean)/runtime_std
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
run_su <- (netflix_s_t$runtime-runtime_mean)/runtime_std
imdb_su <- (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
netflix_s_t_su <- data.frame(
"runtime (SU)": run_su,
"imdb_score (SU)": imdb_su
)
plot(netflix_s_t_su)
run_su <- (netflix_s_t$runtime-runtime_mean)/runtime_std
imdb_su <- (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
str(c(1,2,3,4))
netflix_s_t_su <- data.frame(
"runtime (SU)"= run_su,
"imdb_score (SU)"= imdb_su
)
plot(netflix_s_t_su)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
ggplot(netflix_s_t_su, aes(x = runtime (SU), y = imdb_score (SU))) +
geom_jitter(width = .2)
netflix_s_t_su <- data.frame(
"runtime_(SU)"= run_su,
"imdb_score_(SU)"= imdb_su
)
ggplot(netflix_s_t_su, aes(x = runtime_(SU), y = imdb_score_(SU))) +
geom_jitter(width = .2)
netflix_s_t_su <- data.frame(
"runtime_SU"= run_su,
"imdb_score_SU"= imdb_su
)
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = imdb_score_SU)) +
geom_jitter(width = .2)
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
run_su <- (netflix_s_t$runtime-runtime_mean)/runtime_std
imdb_su <- (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
r = mean(run_su*imdb_su)
slope = r * (imdb_score_std/runtime_std)
intersect = imdb_score_mean - slope * runtime_mean
netflix_s_t_su <- data.frame(
"runtime_SU"= (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score_SU"= (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
netflix_s_t_su <- data.frame(
"runtime_SU"= (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score_SU"= (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
r = mean(netflix_s_t_su$runtime_SU*netflix_s_t_su$imdb_score_SU)
slope = r * (imdb_score_std/runtime_std)
intersect = imdb_score_mean - slope * runtime_mean
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = imdb_score_SU, color)) +
geom_jitter(width = .2)
netflix_s_t_su$prediction = r * netflix_s_t_su$runtime_SU
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = imdb_score_SU, color=prediction)) +
geom_jitter(width = .2)
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = imdb_score_SU, color=as.factor(prediction))) +
geom_jitter(width = .2)
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = c(prediction,imdb_score_SU), color=as.factor(prediction))) +
geom_jitter(width = .2)
ggplot(netflix_s_t_su, aes(x = runtime_SU, y = c(prediction,imdb_score_SU), color=prediction)) +
geom_jitter(width = .2)
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,color="blue")
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,col="blue")
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$prediction,col="red")
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
netflix_s_t_su <- data.frame(
"runtime_SU"= (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score_SU"= (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
r = mean(netflix_s_t_su$runtime_SU*netflix_s_t_su$imdb_score_SU)
slope = r * (imdb_score_std/runtime_std)
intersect = imdb_score_mean - slope * runtime_mean
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,col="blue")
netflix_s_t_su$prediction = r * netflix_s_t_su$runtime_SU
points(netflix_s_t_su$runtime_SU,netflix_s_t_su$prediction,col="red")
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,col="blue", pch=19)
netflix_s_t_su$prediction = r * netflix_s_t_su$runtime_SU
points(netflix_s_t_su$runtime_SU,netflix_s_t_su$prediction,col="red", pch=19)
leyend(-4,7, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
legend(-4,7, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
netflix_s_t_su <- data.frame(
"runtime_SU"= (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score_SU"= (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
r = mean(netflix_s_t_su$runtime_SU*netflix_s_t_su$imdb_score_SU)
slope = r * (imdb_score_std/runtime_std)
intersect = imdb_score_mean - slope * runtime_mean
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,col="blue", pch=19)
netflix_s_t_su$prediction = r * netflix_s_t_su$runtime_SU
points(netflix_s_t_su$runtime_SU,netflix_s_t_su$prediction,col="red", pch=19)
legend(-4,7, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
legend(7,-4, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
legend(6,-4, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
df <- read.csv('titles.csv')
df <- df[complete.cases(df[,c('imdb_score','tmdb_score')]),]
netflix_s <- df[df$type == 'SHOW',]
# si me quiero quedar con los renglones es: df[c(),]
# si me quiero quedar con las columnas es: df[,c()]
netflix_s_t <- netflix_s[,c('runtime','imdb_score')]
netflix_s_t
# si me quiero una columna como:
#  -vector: nombre_t$nombre_c
#  -dataframe: nombre_t['nombre_c']
runtime_std = sd(netflix_s_t$runtime)
runtime_mean = mean(netflix_s_t$runtime)
imdb_score_std = sd(netflix_s_t$imdb_score)
imdb_score_mean = mean(netflix_s_t$imdb_score)
netflix_s_t_su <- data.frame(
"runtime_SU"= (netflix_s_t$runtime-runtime_mean)/runtime_std,
"imdb_score_SU"= (netflix_s_t$imdb_score-imdb_score_mean)/imdb_score_std
)
r = mean(netflix_s_t_su$runtime_SU*netflix_s_t_su$imdb_score_SU)
slope = r * (imdb_score_std/runtime_std)
intersect = imdb_score_mean - slope * runtime_mean
plot(netflix_s_t_su$runtime_SU,netflix_s_t_su$imdb_score_SU,col="blue", pch=19)
netflix_s_t_su$prediction = r * netflix_s_t_su$runtime_SU
points(netflix_s_t_su$runtime_SU,netflix_s_t_su$prediction,col="red", pch=19)
legend(6,-4, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('red', 'blue'))
legend(6,-4, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('blue','red'))
netflix_s_t$prediction = (netflix_s_t_su$prediction*imdb_score_std)+imdb_score_mean
plot(netflix_s_t$runtime,netflix_s_t$imdb_score,col="blue", pch=19)
points(netflix_s_t$runtime,netflix_s_t$prediction,col="red", pch=19)
legend(6,-4, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('blue','red'))
legend(150,3, legend=(c('real data', 'regresion line')), pch=c(19,19), col=c('blue','red'))
source("D:/Practicas/Semestre_actual/data-study/netflix study (R)/show_test.R")
install.packages("ggplot2")
source("D:/Practicas/Semestre_actual/data-study/netflix study (R)/show_test.R")
source("D:/Practicas/Semestre_actual/data-study/netflix study (R)/show_test.R")
source("D:/Practicas/Semestre_actual/data-study/netflix study (R)/show_test.R")
